#Test 1
#Test 2
1) Gestion des certificats TLS (Cert-Manager, OVH Webhook)
Acheter un nom de domaine chez OVH.
Configurer Cert-Manager avec le webhook OVH pour gérer l'ACME challenge.
Utiliser un certificat wildcard (*.domaine.com) pour générer des sous-domaines automatiquement.
Ingress avec NGINX

Installer le NGINX Ingress Controller.
Configurer l'Ingress pour utiliser TLS en pointant vers le certificat généré par Cert-Manager.

2) Monitoring avec KubePrometheus Stack
Installer la stack KubePrometheus (Prometheus, Alertmanager, Node Exporter, Grafana).
Ajouter Loki pour la gestion des logs.
Utiliser Promtail pour collecter et envoyer les logs des pods à Loki.

3) Registry (Docker Images, Helm Charts)
Mettre en place un Docker Registry pour stocker les images Docker.
Créer un Helm Chart Repository pour héberger les charts Helm.

4) ArgoCD
Configurer ArgoCD pour gérer le déploiement GitOps des applications.
Synchroniser les manifests Kubernetes ou Helm Charts avec le cluster.

5) GitLab CI/CD
Créer des pipelines CI/CD dans GitLab pour :
Builder les images Docker.
Les pousser vers le registry.
Pusher les charts Helm.
Wildcard pour les sous-domaines
Configurer un certificat TLS wildcard (*.domaine.com) dans Cert-Manager.
Créer des sous-domaines dynamiquement avec des règles DNS et une configuration DNS correcte (exemple : OVH).
L'Ingress génère automatiquement des routes pour les sous-domaines via le certificat wildcard.
